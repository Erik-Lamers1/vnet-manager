from pyroute2 import IPRoute
from logging import getLogger

from vnet_manager.conf import settings
from vnet_manager.utils.mac import random_mac_generator

logger = getLogger(__name__)


def check_if_interface_exists(ifname):
    """
    Check if an interface exists
    :param str ifname: The interface name to check for
    :return: bool: True if the interface exists, False otherwise
    """
    iface = IPRoute().link_lookup(ifname=ifname)
    return True if iface else False


def create_vnet_interface(ifname):
    """
    Creates a VNet bridge interface
    :param str ifname: The name of the interface to create
    """
    logger.info("Creating VNet bridge interface {}".format(ifname))
    ip = IPRoute()
    ip.link("add", ifname=ifname, kind="bridge")
    dev = ip.link_lookup(ifname=ifname)[0]
    # Make sure it's set to down state
    ip.link("set", index=dev, state="down")
    # Set the mac
    ip.link("set", index=dev, address=random_mac_generator())
    # Bring up the interface
    ip.link("set", index=dev, state="up")


def check_vnet_interface_status(config):
    """
    Check the status of the vnet interfaces defined in the config
    This function will correct the status if it is wrong
    :param dict config: The config generated by get_config()
    """
    for bridge in range(0, config["switches"]):
        ifname = settings.VNET_BRIDGE_NAME + str(bridge)
        if not check_if_interface_exists(ifname):
            create_vnet_interface(ifname)
        # Make sure the interface is up
        IPRoute().link("set", ifname=ifname, state="up")
